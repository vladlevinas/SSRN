
import pandas as pd
import torch
from sentence_transformers import SentenceTransformer, util
import streamlit as st

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = pd.read_csv("abstracts_for_search.csv")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
model = SentenceTransformer('all-MiniLM-L6-v2')

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–±—Å—Ç—Ä–∞–∫—Ç–æ–≤
@st.cache_data(show_spinner=False)
def compute_embeddings():
    return model.encode(df['abstract'].tolist(), convert_to_tensor=True)

abstract_embeddings = compute_embeddings()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üîç –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞—É—á–Ω—ã–º —Å—Ç–∞—Ç—å—è–º –¥–ª—è —Ñ–∏–Ω—Ç–µ—Ö–∞")
query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–∏–¥–∂–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤):")

if query:
    with st.spinner("–ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏..."):
        query_embedding = model.encode(query, convert_to_tensor=True)
        scores = util.cos_sim(query_embedding, abstract_embeddings)[0]
        top_results = torch.topk(scores, k=3)

        st.subheader("üìå –¢–æ–ø-3 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Å—Ç–∞—Ç—å–∏:")
        for score, idx in zip(top_results.values, top_results.indices):
            paper = df.iloc[idx]
            st.markdown(f"### {paper['paper_name']}")
            st.markdown(f"**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {score.item():.2f}")
            st.markdown(f"**–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è:** {paper['abstract']}")
            st.markdown(f"**–ü–æ–ª—å–∑–∞ –¥–ª—è —Ñ–∏–Ω—Ç–µ—Ö–∞:** {paper['fintech_relevance_summary']}")
            st.markdown("---")
